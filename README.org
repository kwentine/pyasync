Some experiments with asynchronous programming in Python, inspired by
the following great resources:

- A book chapter by Jesse Jiryu Davis and Guido van Rossum introducing
  the ideas underlying the `asyncio` library
  - [[http://www.aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html][A web crawler with asyncio coroutines]] 
- David Beazley's amazing tutorials 
  - [[https://www.youtube.com/watch?v=D1twn9kLmYg][Generators: the final frontier]]
  - [[https://www.youtube.com/watch?v=Z_OAlIhXziw][A curious course on coroutines and concurrency]]
  - [[https://www.youtube.com/watch?v=MCs5OvhV9S4][Python concurrency from the ground up]]

* Fibonacci servers

The `fibservers` directory contains incrementals version of a simple
TCP server computing Fibonacci numbers, gradully going from
synchronous to async.

- `fibservsync.py`
  Synchronous version. Handles one connexion at a time.

- `fibservthrd.py`

  Introduce concurrency by handling each incoming connexion in a
  separate thread.

- `fibservcb.py` 

  First single-threaded async version, using callbacks and I/O polling
  with the standard library's `selectors` module.

- `fibservcoro.py`

  Use coroutines to implement tasks, driven by a simple event loop.

- `fibservcorothrd.py`

  Asynchronous I/O handled by an event loop in the main thread, and
  computation of Fibonacci numbers delegated to a `ThreadPoolExecutor`

- `fibseraiocb.py`

  Modify the callback-style server using asyncio's API to [[https://docs.python.org/3/library/asyncio-eventloop.html#watch-file-descriptors][watch file
  descriptors.]]

- `fibservaiocorothrd.py`

  Modify the coroutine-based server using asyncio's event loop and
  [[https://docs.python.org/3/library/asyncio-eventloop.html#low-level-socket-operations][low-level socket operations]].

- `fibservaoistreams.py`

  Final and shortest version, using `asyncio`'s TCP server and
  [[https://docs.python.org/3/library/asyncio-stream.html][streams]].

** Performance assessment

In addition to these, I adapted David Beazley's client implementations to
play around and test performance:

- `fibclientfast.py`

  Repeatedly send short-time requests and monitor the requests-per-second
  rate.

- `fibclientslow.py` 

  Send comparatively CPU-demanding requests (computing Fib(33)) and
  monitor the time-per-request.

The benchmarks performed on my machine, giving a basic illustration of
some tradeoffs to keep in mind when doing asynchronous programming in
Python, are summed-up in `perfs.org`






** Presentation

The notes of a short presentation I gave on the topic, and a reveal.js
export are found in the `presentation directory`

* Simplified event loop

While reading asyncio code, I started out to implement a simplified
version of the event loop, tasks and futures, while mimicking the
API. It tries to capture the essential logic, while overlooking error
handling and many other subtleties. This work in progress is in the
`eventloop` directory.

* Web clients

The `webclients` folder follows the same incremental approach,
focusing on the simple task of concurrently fetching a list of
URLs. Work in progress, also integrating some Tornado examples.
